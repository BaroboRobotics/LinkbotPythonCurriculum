<?xml version="1.0"?>
<!DOCTYPE book [ 
<!ELEMENT book (chapter)>
<!ELEMENT chapter (section, question, figure, figref, p)>
<!ELEMENT section (section, question, figure, figref, p)>
<!ELEMENT p (question, figure, figref, output, code, snippet)>
<!ELEMENT figure (#PCDATA)>
<!ELEMENT figref (#PCDATA)>
<!ELEMENT question (answer)>
<!ELEMENT answer (#PCDATA)>

<!ATTLIST book title CDATA #REQUIRED>
<!ATTLIST chapter title CDATA #REQUIRED>
<!ATTLIST section title CDATA #REQUIRED>
<!ATTLIST section title CDATA #IMPLIED>
<!ATTLIST section title CDATA #IMPLIED>
<!ATTLIST figure caption CDATA #IMPLIED>
<!ATTLIST figure name CDATA #IMPLIED>
]>

<book title="Programming the Barobo Linkbot with Python">
<chapter title="Preface">
  <p>
    Welcome to "Programming the Barobo Linkbot with Python". The goals of
    this book are to familiarize you with the Python programming language
    and essential concepts of programming robots.
  </p> <p>
    Some additional software is required for you to follow along with the
    lessons in this book. The required software includes Python, several
    third-party Python packages including our own Linkbot Control package,
    and a good code editor. The easiest way to obtain, install, and setup
    all of the software is to download and install our all-in-one Python
    Curriculum bundle. The bundle includes:
    <ul>
      <li> Python and all required and suggested Python packages. </li>
      <li> Ninja-IDE : A powerful and pretty looking code editor. </li>
      <li> Curriculum code example programs. </li>
    </ul>
    Some users may not want to install our bundle. These include Python
    gurus who already have a version of Python installed, and other advanced
    users. For everyone else, we highly recommend you use our bundled.
  </p>
</chapter>

<chapter title="Introduction">
  <p>
    You may already have an idea of what a robot is from a variety of TV shows 
    and movies. They vary from tiny wheeled vehicles that beep and boop to
    humanoid intellegent translators such as C-3PO to gigantic transforming
    robots like Optimus Prime. Indeed, the definition of a robot is any
    machine capable of performing a programmed task and interacting with
    its physical environment with motors, actuators, and sensors. You may
    be surprised to know that, by this definition, even your refrigerator 
    may be considered a robot! Many modern refrigerators are capable of 
    automatically making ice, maintaining a correct amount of ice in the
    freezer, and even dispensing the ice at the touch of a button. This
    machine is running a program, uses actuators to move the ice around,
    and has sensors such as buttons and temperature sensors.
  </p>
  <p>
    Indeed, robots and robotic systems have proliferated modern life, and
    as such, the study of robotics has become extremely important. In 
    addition to learning about robotics for the sake of robotics, certain
    robots are specifically designed to help teach programming, math, science, 
    physics, and even music! One such robot is the Linkbot modular robot.
    The Linkbot has been designed to be low-cost, fully-featured, tough, and
    easily programmable for day-to-day use by students and hobbyists of all 
    ages. 
  </p>
  <p>
    This curriculum is designed to bring someone with limited programming
    experience up to speed with programming a Linkbot using the Python
    programming language. Python is a free, fully featured, and easy 
    language to learn and use. It's unique design makes it popular among
    a large spectrum of programmers from absolute beginners to Google
    wizards. 
  </p>
  <section title="Exercises">
    <question>
      What is a robot?
      <answer>
        A robot is a programmable machine that is able to perform an 
        task which includes sensing and acting on its environment.
      </answer>
    </question>
    <question>
      Is your lawn-mower a robot? Why or why not?
      <answer>
        Your lawn mower is probably not considered a robot. Although it
        acts on its environment and may have sensors, it is not 
        programmable and does not perform an automated task.
      </answer>
    </question>
  </section>
</chapter>

<chapter title="Introduction to the Barobo Linkbot">
  This chapter will discuss how to operate your Linkbots.
  <figure 
    caption="Linkbot Diagram and Features"
    name="fig_schematic">images/linkbot_diagram.png</figure>
  <section title="Turning your Linkbot On and Off">
    <p>
    To turn your Linkbot on and off, press and hold the power button as shown
    in Figure <figref name="fig_schematic"/> . When turning the robot on, 
    a purple LED will light up between the 'A' and 'B' buttons as soon as
    you press the button. Continue holding the button until that purple LED 
    turns blue. After the LED turns blue, you may release the power button.
    </p>
    <p>
    Turning off the robot follows a similar process. As you press and hold the 
    power button, the LED between buttons 'A' and 'B' will turn purple. Continue
    holding the power button until the robot turns off all LEDs and shuts off.
    </p>
  </section>
  <section title="Linkbot Motor Zero Positions">
    <section title="Moving the Motors to Zero Positions">
      <p>
      While the robot is on, you may make the robot move its joints to its
      zero positions by pressing and releasing the 'A' and 'B' buttons
      simultaneously. The robot will move both of its motors to its zero
      positions and lock there. To release the joints, press the 'A' and 'B'
      buttons together again. This can be used to check the calibration of 
      the motors. When the joints are in their zero positions, the large
      notch on the black joint face should line up with the notch on the
      white plastic, as shown in Figure <figref name="fig_wheelnotch"/>.
      </p>
      <p>
      If the notches do not line up after the robot moves to its zero positions,
      the zero positions may need to be recalibrated. The recalibration
      process is described in the next section.
      </p>
    </section>
    <section title="Recalibrating the Linkbot Zero Positions">
      To recalibrate the Linkbot zero positions, follow the following steps:
      <ol>
        <li> Manually move the motors to their zero positions by aligning
             the notch on the motors with the notch on the while plastic
             body, as shown in Figure <figref name="fig_wheelnotch"/>. If
             the motors are locked, press and release buttons 'A' and 'B' 
             simultaneously, or power-cycle the robot to release the motors.</li>
        <li> Hold down both buttons 'A' and 'B'. After about three seconds,
             the robot will flash its LED. It has now remembered its
             current motor positions as the new "Zero" position. </li>
      </ol>
    </section>
  </section>
  <section title="Controlling a Linkbot with another Linkbot">
    <p> Details in this section require you to have at least two Linkbots. 
    </p>
    <section title="Pairing Linkbots Together and Creating Linkbot Groups">
      <p> To pair two linkbots together we use a process called "bump-connect"; follow these steps:
        <ol>
          <li> Press and hold the 'B' button on the robot you want to be the controller robot. </li>
          <li> Next, press and hold the 'B' button on the robot you want to be a group member
               which will be controlled by the controller robot. </li>
          <li> Firmly (yet gently) "bump" the two robots together. Both robots should flash
               immediately. Then, after a second, the controller robot will display a blue
               LED while intermittently flashing a randomly chosen group color while the
               group member robot will display a solid group-color. The two robots are
               now paired. </li>
          <li> To add more robots to the group, follow the same steps above, except 
               make sure one of the robots is already in the group. When bump-connecting
               two robots, if one of the robots is already in a group, the other robot
               will automatically join that group.  </li>
        </ol>
      </p>
    </section>
    <section title="Cycling Through Robot Control Modes">
      <p> There are a few ways the controller robot can be used to control the rost of
      the group member robots. Each different control mode is indicated by the color 
      of the LED on the controller robot. The modes may be cycled through by pressing 
      the 'B' button on the master robot. The control modes are: </p>
      <ul>
        <li> Blue: Pose Teaching Mode </li>
        <li> Green: Tilt-Drive Mode </li>
        <li> Light Blue: Copy-Cat Mode </li>
      </ul>
      <section title="Pose Teaching Mode">
        <p>
        In Pose Teaching mode, the robots can remember and play back a set of "poses". 
        In this mode, the 'A' button is used to record a pose, the Power button is used
        to reset all recorded poses, and the 'B' button is used to play or pause the
        poses. Note that if the 'B' button is pressed while there are no recorded poses,
        the robot will cycle to the next control method, which is Tilt-Drive mode.
        </p>
        <p>
        Typically, in this mode, the user will move the robot motors to their first 
        desired configuration and then press the 'Record' button once on any of the
        robots in the group. Then, the user will move the robots to the next desired
        position and press 'Record' again. They will repeat the process until they are
        satisfied with the number of poses and then click on the 'Play' button. The
        robots will begin by moving to the first pose, then the second, and so on
        until it reaches the last pose. Once it reaches the last pose, it automatically
        goes back to the first pose and repeats the process until the 'B' button is
        pressed again.
        </p>
      </section>
      <section title="Tilt-Drive Mode">
        <p>
        In Tilt-Drive mode, the controller robot uses its current orientation to drive
        the motors on the group-member robots. This mode is typically used with
        group-member robots that have wheels and are driving around. The controller
        robot can be tilted forward, backward, or side to side in order to drive
        the group member(s) forward, backward, or turn.
        </p>
      </section>
      <section title="Copy-Cat Mode">
        <p>
        In Copy-Cat mode, the group members all copy the motor positions on the 
        controller robot. You can move the motors on the controller robot and all
        of the group members will try to copy the controller.
        </p>
      </section>
    </section>
  </section>
</chapter>

<chapter title="Controlling Linkbots with BaroboLink">
  <p>
    BaroboLink is a computer program that allows you to connect to and 
    directly control your robots with an intuitive user-interface. It
    can also be used to locate and organize robots so that your Python
    programs can easily find and control robots. This chapter will familiarize
    you with BaroboLink and concepts such as connecting to robots, motor 
    positions, moving motors, and reading sensor values.
  </p>
  <section title="Starting BaroboLink">
    <p>
      In Windows, BaroboLink can usually be found in the Start menu under
      Start -> All Programs -> Barobo -> BaroboLink.
    </p>
    <p>
      On Mac OS X systems, BaroboLink can usually be found in the Finder under
      Applications -> BaroboLink
    </p>
  </section>
  <section title="Connecting to Robots">
    <p>
      <figure caption="BaroboLink Connect Panel"
              name="fig_barobolink_connect">images/barobolink_connect.png</figure>
      To connect to robots, they have to first be added to the list of known robots.
      On the connect panel, shown in Figure <figref name="fig_barobolink_connect"/>,
      type the Serial ID of the robot you want to connect to in the entry box at the
      top and click the button labeled "Add Robot". This can be repeated for any number
      of robots. Once robots are added to the connect panel, they will be remembered
      in the future when you start BaroboLink again.
    </p>
    <p>
      Once the robots are added to the connect panel, they still need to be connected.
      To connect to a robot, first make sure that there is at least one Linkbot or
      Linkbot-Dongle connected to the computer with a Micro-USB cable. The robots
      are capable of communicating to each other wirelessly, but they cannot communicate
      wirelessly to a computer. The connected robot or dongle acts as a translator
      so that your computer can talk to the rest of your robots wirelessly.
    </p>
    <p>
      Once the robots are added to the connect panel, you may double-click on a robot
      to connect to it. When the robot connects, it should change its LED color
      to green. 
    </p>
    <p>
      If you experience any trouble during the connection process, rebooting the robots
      and BaroboLink can help. Make sure the robots are not currently connected to
      anything else, and that they are currently not paired or bumpconnected with any
      other robots.
    </p>
  </section>
  <section title="The Control Panel">
    <p>
      The "Control" panel in BaroboLink can be used to move a robot in various ways.
      Once a robot is connected to BaroboLink, the joint angles and speeds of
      the robot are displayed on the Motion Control Panel as shown in Figure
      <figref name="fig_control_panel"\>. The Motion Control
      Panel can be used to display information about the Linkbot’s joint
      positions, and also control the speeds and positions of the Linkbot’s
      joints. The panel is divided into five sections; three on the top half of
      the panel, and two on the bottom half. The functions of these five
      sections will be discussed in the next section.
    </p>
    <p>
      Note that the Control panel can only control one robot at a time. You can
      select which robot to control by clicking and selecting that robot's Serial ID
      on the Connect pane on the left-hand side of the application.
    </p>
    <section title="Joint Control">
      <p>
        This portion of the Control panel can be used to make the motors on the robot
        begin turning indefinitely. Clicking on either "up" arrow will cause that motor
        to begin rotating in the positive direction. Similarly, clicking on either
        "down" arrow will cause that motor to begin rotating in the negative 
        direction. Finally, clicking on the "stop" button will cause that motor to
        stop moving.
      </p>
    </section>
    <section title="Drive Control">
      <p>
        This portion of the Control Panel is designed to be used with a Linkbot-I with
        two wheels attached. The buttons in this portion of the Control Panel
        make the robot drive forward, turn left and right, and drive backward.
      </p>
      <p>
        The "Zero" button makes the robot move all of its motors to its zero positions.
      </p>
      <p>
        The "Stop" button makes the robot immediately stop moving all of its motors.
      </p>
    </section>
    <section title="Position (degrees)">
      <p>
        In this portion of the Control panel, you will find two dials which represent the
        current joint positions of the two motors on the robot. The dials serve as both
        input and output. You can click an drag on the dials to move the motors on the 
        robot. You can also manually move the motors on the robot and the dials will update
        to show the current positions of each motor.
      </p>
    </section>
    <section title="Speed">
      <p>
        In this portion of the Control panel, you can modify the speed settings of each 
        motor on the robot. The speed settings determine how fast the motors move
        when using the "Joint Control" and "Drive Control" portions of the control panel.
      </p>
    </section>
  </section>
  <section title="The Auxiliary Control, Sensors Panel">
    <p>
      This panel allows you to access some other functionality on the
      Linkbot, including the buzzer, LED, and accelerometer. This dialog
      is subdivided into three sections: Buzzer Control, Accelerometer, and
      LED Color.
    </p>
    <section title="Buzzer Control">
    </section>
    <section title="Accelerometer">
    </section>
    <section title="LED Color">
    </section>
  </section>
</chapter>

<chapter title="Introduction to Programming Linkbots with Python">
  <section title="Getting Started with Python for Computer Programming">
    <p>
      In the previous chapter, we learned how to control a Linkbot using the
      Control Panel. However, the Control panel requires human interaction
      to control the Linkbots. In order for the Linkbot to qualify as a
      real robot, it must be able to perform automated tasks using computer
      programs. By using computer programs to control the Linkbot, we can
      make the Linkbot solve complicated tasks or perform tasks automatically.
      Each program can be saved to a different file and different programs
      can be executed depending on what you want your robot to do. 
      Existing programs can also be modified to solve similar problems.
    </p>
    <section title="Getting Started with Ninja-IDE">
      <p>
        Ninja-IDE is a type of program called an "Integrated Development
        Environment (IDE)". Typically, IDE's are capable of editing code,
        displaying code in a visually appealing manner, executing code, and
        debugging code all in one program. 
      </p> <p>
        You can start Ninja by double-clicking on the Ninja-IDE icon on your
        desktop, or by finding it in the Start menu under "Start -> All
        Programs -> Ninja".
      </p>
    </section>
    <section title="Your First Python Program">
      <p>
        Once you have opened Ninja, begin by creating a new program. You 
        can do this by clicking on the "New File" icon in the toolbar on
        the left hand side, or by clicking "File -> New" in the menu.
      </p><p>
        Once you have opened a new file, try typing the following code
        into the window. Make sure you type the code in exactly as shown,
        including capitolization and punctuation.
        <code name="hello.py" caption="A simple Python program">code/hello.py</code>
        After you have typed it in, save it to a file called "hello.py". 
        Python programs typically use the suffix ".py".
      </p><p>
        <figure name="fig_ninja_hello" caption="A Ninja-IDE Window after executing hello.py.">
          images/fig_ninja_hello.png </figure>
        Once you have saved your new program to a file, click on the "Run File"
        icon <img src="images/ninja_runfile.png"/> on the toolbar an the left-hand
        side to run your program. Ninja should pop up an output window pane
        with the results of your program, which should appear as shown in Figure
        <figref name="fig_ninja_hello"/>. As shown in the figure, the output of
        this program is
        <output>Hello, world!</output>
        Congratulations! You have just written and executed your first Python program!
      </p> <p>
        Now, lets talk about the program you just wrote. The file, "hello.py",
        is called "Source Code". Source code for most major programming languages
        is in a format called "plain text", which is the same format in ".txt"
        files, which you may already be familiar with. This bare-bones format
        cannot support any word-processor features which you may be used to, such as
        different fonts, font sizes, embedded images, etc. 
      </p> <p>
        Python is capable of running program directly from source code using a 
        process called "interpretation". Some other languages like C, C++, and
        Java require the source code to be first "compiled" before it can be 
        executed. The process of compilation is basically when another program,
        called a "compiler", interprets human-readable source code into a
        machine-native program (ones and zeros). 
      </p>
    </section>
  </section>
</chapter>
</book>
